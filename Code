//www.elegoo.com

/************************Hardware Related Macros************************************/
#define MQ_PIN (5)                  //define which analog input channel you are going to use
#define RL_VALUE (5)                //define the load resistance on the board, in kilo ohms
#define RO_CLEAN_AIR_FACTOR (9.83)  //RO_CLEAR_AIR_FACTOR=(Sensor resistance in clean air)/RO, \
                                    //which is derived from the chart in datasheet

/***********************Software Related Macros************************************/
#define CALIBARAION_SAMPLE_TIMES (50)      //define how many samples you are going to take in the calibration phase
#define CALIBRATION_SAMPLE_INTERVAL (500)  //define the time interal(in milisecond) between each samples in the \
                                           //cablibration phase
#define READ_SAMPLE_INTERVAL (50)          //define how many samples you are going to take in normal operation
#define READ_SAMPLE_TIMES (5)              //define the time interal(in milisecond) between each samples in \
                                           //normal operation

/**********************Application Related Macros**********************************/
#define GAS_LPG (0)
#define GAS_CO (1)
#define GAS_SMOKE (2)

/*****************************Globals***********************************************/
float LPGCurve[3] = { 2.3, 0.21, -0.47 };    //two points are taken from the curve.
                                             //with these two points, a line is formed which is "approximately equivalent"
                                             //to the original curve.
                                             //data format:{ x, y, slope}; point1: (lg200, 0.21), point2: (lg10000, -0.59)
float COCurve[3] = { 2.3, 0.72, -0.34 };     //two points are taken from the curve.
                                             //with these two points, a line is formed which is "approximately equivalent"
                                             //to the original curve.
                                             //data format:{ x, y, slope}; point1: (lg200, 0.72), point2: (lg10000,  0.15)
float SmokeCurve[3] = { 2.3, 0.53, -0.44 };  //two points are taken from the curve.
                                             //with these two points, a line is formed which is "approximately equivalent"
                                             //to the original curve.
                                             //data format:{ x, y, slope}; point1: (lg200, 0.53), point2: (lg10000,  -0.22)
float Ro = 10;                               //Ro is initialized to 10 kilo ohms

#include <dht_nonblocking.h>
#define DHT_SENSOR_TYPE DHT_TYPE_11
static const int DHT_SENSOR_PIN = 3; //DHT11
DHT_nonblocking dht_sensor(DHT_SENSOR_PIN, DHT_SENSOR_TYPE);

#define BUZZER_PIN 2 //BUZZER

int analogPin = 5;  //MQ2

#include <Wire.h>
#include <LiquidCrystal_I2C.h>  //ประกาศ Library ของจอ I2C

LiquidCrystal_I2C lcd(0x27, 16, 2); //รหัสประเภท/Columns/Rows

void setup() {
  Serial.begin(19200);
  pinMode(BUZZER_PIN, OUTPUT);

  Serial.print("Calibrating...\n");
  Ro = MQCalibration(MQ_PIN);  //Calibrating the sensor. Please make sure the sensor is in clean air
                               //when you perform the calibration
  Serial.print("Calibration is done...\n");
  Serial.print("Ro=");
  Serial.print(Ro);
  Serial.print("kohm");
  Serial.print("\n");
}

static bool measure_environment(float *temperature, float *humidity) {
  static unsigned long measurement_timestamp = millis();

  /* Measure once every four seconds. */
  if (millis() - measurement_timestamp > 3000ul) {
    if (dht_sensor.measure(temperature, humidity) == true) {
      measurement_timestamp = millis();
      return (true);
    }
  }

  return (false);
}

void loop() {
  float temperature;
  float humidity;

  /* Measure temperature and humidity.  If the functions returns
     true, then a measurement is available. */
  if (measure_environment(&temperature, &humidity) == true) {

    int LPG = MQGetGasPercentage(MQRead(MQ_PIN) / Ro, GAS_LPG);
    int CO = MQGetGasPercentage(MQRead(MQ_PIN) / Ro, GAS_CO);
    int SMOKE = MQGetGasPercentage(MQRead(MQ_PIN) / Ro, GAS_SMOKE);

    Serial.print("Temperature: ");
    Serial.print(temperature, 0);
    Serial.println(" ํC");
    //Serial.print("Humidity: ");
    //Serial.print( humidity, 0 );
    //Serial.println("%");

    Serial.print("LPG:");
    Serial.print(LPG);
    Serial.print("ppm / ");
    Serial.print("CO:");
    Serial.print(CO);
    Serial.print("ppm / ");
    Serial.print("SMOKE:");
    Serial.print(SMOKE);
    Serial.print("ppm");
    Serial.print("\n");

    lcd.init();
    lcd.backlight();
    lcd.setCursor(0, 0);
    lcd.print("TEMP");
    lcd.setCursor(0, 1);
    lcd.print((int)temperature);
    lcd.print(" C");

    lcd.setCursor(5, 0);
    lcd.print("LPG___");
    lcd.print((int)LPG);
    lcd.setCursor(5, 1);
    lcd.print("SMOKE_");
    lcd.print((int)SMOKE);

    if (temperature > 25 || LPG > 200 || SMOKE > 900) { //LPG AND SMOKE value type ppm
      digitalWrite(BUZZER_PIN, HIGH);  //ปิดเสียงเตือน
      delay(500);
      digitalWrite(BUZZER_PIN, LOW);  //เปิดเสียงเตือน
      delay(50);
    } else {
      digitalWrite(BUZZER_PIN, HIGH);  //ปิดเสียงเตือน
      delay(1000);
    }
  }
}

/****************** MQResistanceCalculation ***************************************/
float MQResistanceCalculation(int raw_adc) {
  return (((float)RL_VALUE * (1023 - raw_adc) / raw_adc));
}

/***************************** MQCalibration **************************************/
float MQCalibration(int mq_pin) {
  int i;
  float val = 0;

  for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++) {  //take multiple samples
    val += MQResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val / CALIBARAION_SAMPLE_TIMES;  //calculate the average value

  val = val / RO_CLEAN_AIR_FACTOR;  //divided by RO_CLEAN_AIR_FACTOR yields the Ro
                                    //according to the chart in the datasheet

  return val;
}
/*****************************  MQRead ********************************************/
float MQRead(int mq_pin) {
  int i;
  float rs = 0;

  for (i = 0; i < READ_SAMPLE_TIMES; i++) {
    rs += MQResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }

  rs = rs / READ_SAMPLE_TIMES;

  return rs;
}

/*****************************  MQGetGasPercentage *********************************/
int MQGetGasPercentage(float rs_ro_ratio, int gas_id) {
  if (gas_id == GAS_LPG) {
    return MQGetPercentage(rs_ro_ratio, LPGCurve);
  } else if (gas_id == GAS_CO) {
    return MQGetPercentage(rs_ro_ratio, COCurve);
  } else if (gas_id == GAS_SMOKE) {
    return MQGetPercentage(rs_ro_ratio, SmokeCurve);
  }

  return 0;
}

/*****************************  MQGetPercentage **********************************/
int MQGetPercentage(float rs_ro_ratio, float *pcurve) {
  return (pow(10, (((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0])));
}
